<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\gastos\controllers;

use gamboamartin\errores\errores;
use gamboamartin\gastos\models\gt_solicitud;
use gamboamartin\system\_ctl_parent_sin_codigo;
use gamboamartin\system\links_menu;
use gamboamartin\template\html;
use html\gt_autorizante_html;
use html\gt_solicitante_html;
use html\gt_solicitud_html;
use html\gt_centro_costo_html;
use html\gt_tipo_solicitud_html;
use PDO;
use stdClass;

class controlador_gt_solicitud extends _ctl_parent_sin_codigo {

    public function __construct(PDO $link, html $html = new \gamboamartin\template_1\html(), stdClass $paths_conf = new stdClass()){
        $modelo = new gt_solicitud(link: $link);

        $html = new gt_solicitud_html(html: $html);
        $obj_link = new links_menu(link: $link, registro_id:$this->registro_id);


        $datatables = new stdClass();
        $datatables->columns = array();
        $datatables->columns['gt_solicitud_id']['titulo'] = 'Id';
        $datatables->columns['gt_solicitud_descripcion']['titulo'] = 'Solicitud';


        $datatables->filtro = array();
        $datatables->filtro[] = 'gt_solicitud.id';
        $datatables->filtro[] = 'gt_solicitud.descripcion';

        parent::__construct(html: $html, link: $link, modelo: $modelo, obj_link: $obj_link, datatables: $datatables,
            paths_conf: $paths_conf);

        $this->titulo_lista = 'Tipo Solicitud';

    }

    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta = parent::alta(header: false, ws: false); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar template', data: $r_alta, header: $header, ws: $ws);
        }

        $select = (new gt_centro_costo_html(html: $this->html_base))->select_gt_centro_costo_id(cols:12,con_registros: true,
            id_selected: -1, link: $this->link,required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select = new stdClass();
        $this->inputs->select->gt_centro_costo_id = $select;

        $select = (new gt_tipo_solicitud_html(html: $this->html_base))->select_gt_tipo_solicitud_id(cols:12,con_registros: true,
            id_selected: -1, link: $this->link,required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select->gt_tipo_solicitud_id = $select;

        $select = (new gt_solicitante_html(html: $this->html_base))->select_gt_solicitante_id(cols:12,con_registros: true,
            id_selected: -1, link: $this->link,required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select->gt_solicitante_id = $select;

        return $r_alta;

    }

    public function modifica(bool $header, bool $ws = false, array $keys_selects = array()): array|stdClass
    {
        $r_modifica = parent::modifica($header, $ws, $keys_selects); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar template', data: $r_modifica, header: $header, ws: $ws);
        }

        $select = (new gt_centro_costo_html(html: $this->html_base))->select_gt_centro_costo_id(cols:12,con_registros: true,
            id_selected: $this->row_upd->gt_centro_costo_id, link: $this->link,required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select = new stdClass();
        $this->inputs->select->gt_centro_costo_id = $select;

        $select = (new gt_tipo_solicitud_html(html: $this->html_base))->select_gt_tipo_solicitud_id(cols:12,con_registros: true,
            id_selected: $this->row_upd->gt_tipo_solicitud_id, link: $this->link,required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select->gt_tipo_solicitud_id = $select;

        return $r_modifica;
    }


    public function asignar_solicitante(bool $header, bool $ws = false): array|string
    {

        $r_modifica =  parent::modifica($header, $ws); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_modifica, header: $header,ws:$ws);
        }
        if($this->registro_id<=0){
            return $this->retorno_error(mensaje: 'Error registro_id debe ser mayor a 0', data: $this->registro_id,
                header:  $header, ws: $ws);
        }

        if(!isset($this->row_upd)){
            $this->row_upd = new stdClass();
        }
        if(!isset($this->row_upd->status)){
            $this->row_upd->status = '';
        }

        $this->row_upd = (object)($this->modelo->registro(registro_id: $this->registro_id));

        $select = (new gt_solicitante_html(html: $this->html_base))->select_gt_solicitante_id(cols:12,con_registros: true,
            id_selected: -1, link: $this->link,required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select = new stdClass();
        $this->inputs->select->gt_solicitante_id = $select;


        $select = (new gt_solicitud_html(html: $this->html_base))->select_gt_solicitud_id(cols:12,con_registros: true,
            id_selected: $this->row_upd->gt_solicitud_id , link: $this->link,required: true, disabled: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select->gt_solicitud_id = $select;




        return array();
    }

    public function asignar_autorizante(bool $header, bool $ws = false): array|string
    {

        $r_modifica =  parent::modifica($header, $ws); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_modifica, header: $header,ws:$ws);
        }
        if($this->registro_id<=0){
            return $this->retorno_error(mensaje: 'Error registro_id debe ser mayor a 0', data: $this->registro_id,
                header:  $header, ws: $ws);
        }

        if(!isset($this->row_upd)){
            $this->row_upd = new stdClass();
        }
        if(!isset($this->row_upd->status)){
            $this->row_upd->status = '';
        }

        $this->row_upd = (object)($this->modelo->registro(registro_id: $this->registro_id));

        $select = (new gt_autorizante_html(html: $this->html_base))->select_gt_autorizante_id(cols:12,con_registros: true,
            id_selected: -1, link: $this->link,required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select = new stdClass();
        $this->inputs->select->gt_autorizante_id = $select;


        $select = (new gt_solicitud_html(html: $this->html_base))->select_gt_solicitud_id(cols: 12, con_registros: true,
            id_selected: $this->row_upd->gt_solicitud_id, link: $this->link, disabled: true, required: true);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar select', data: $select, header: $header, ws: $ws);
        }

        $this->inputs->select->gt_solicitud_id = $select;




        return array();
    }

    protected function inputs_children(stdClass $registro): array|stdClass{

        $gt_solicitud_id = (new gt_solicitud_html(html: $this->html_base))->select_gt_solicitud_id(
            cols:12,con_registros: true,id_selected:  $registro->gt_solicitud_id,link:  $this->link, disabled: true);

        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al obtener gt_tipo_solicitud_id',data:  $gt_solicitud_id);
        }



        $this->inputs = new stdClass();
        $this->inputs->select = new stdClass();
        $this->inputs->select->gt_solicitud_id = $gt_solicitud_id;


        return $this->inputs;
    }

    protected function key_selects_txt(array $keys_selects): array
    {
        $keys_selects = (new \base\controller\init())->key_select_txt(cols: 6,key: 'codigo',
            keys_selects:$keys_selects, place_holder: 'Cod');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new \base\controller\init())->key_select_txt(cols: 6,key: 'descripcion',
            keys_selects:$keys_selects, place_holder: 'Solicitud');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        return $keys_selects;
    }

    public function solicitantes(bool $header = true, bool $ws = false): array|stdClass|string
    {

        $data_view = new stdClass();
        $data_view->names = array('Id','Solicitud', 'Solicitante','Acciones');
        $data_view->keys_data = array('gt_solicitantes_id','gt_solicitud_codigo','gt_solicitante_codigo');
        $data_view->key_actions = 'acciones';
        $data_view->namespace_model = 'gamboamartin\\gastos\\models';
        $data_view->name_model_children = 'gt_solicitantes';


        $contenido_table = $this->contenido_children(data_view: $data_view, next_accion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener tbody',data:  $contenido_table, header: $header,ws:  $ws);
        }


        return $contenido_table;

    }

    public function autorizantes(bool $header = true, bool $ws = false): array|stdClass|string
    {

        $data_view = new stdClass();
        $data_view->names = array('Id','Solicitud', 'Autorizante','Acciones');
        $data_view->keys_data = array('gt_autorizantes_id','gt_solicitud_codigo','gt_autorizante_codigo');
        $data_view->key_actions = 'acciones';
        $data_view->namespace_model = 'gamboamartin\\gastos\\models';
        $data_view->name_model_children = 'gt_autorizantes';


        $contenido_table = $this->contenido_children(data_view: $data_view, next_accion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener tbody',data:  $contenido_table, header: $header,ws:  $ws);
        }


        return $contenido_table;

    }


}
